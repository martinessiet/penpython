Decision Making in Python 

Decisions are a core part of programming. Because we will always create programs that anticipate certain 
conditions to be met during normal execution, as programmers, we must specify actions that the program should take when 
the conditions are met. 

What decision structures do is to evaluate one or multiple expressions which return TRUE or FALSE outcomes. 
We can then determine what actions the program should take by defining the statements to execute when the outcome is TRUE or FALSE.

			THE 'if' STATEMENT 

The diagram below is a flowchart diagram of a basic decision making structure used in most programming languages. 

In Python, any non-null and non-zero value returned is regarded as TRUE while a null or zero value is assumed to be FALSE. 
The decision making structure demonstrated in the figure above represents the most basic conditional statement 
that uses the if statement that we first used.

Here is the syntax of the if decision making structure: 

if condition_test: 
statement 
Note: Indentation is very important. 

if statement 

x = 10
if x == 10: 
    print ("x = 10")

 
What this simple exercise does is this: 

1. First, the variable x is created and assigned a value of 10. 

2. The decision making structure if evaluates whether the value of x is equal to 10. 

3. The string “x = 10” is displayed on the screen should the if statement evaluate to TRUE.

Note that we can also write the if statement in this format: 

x = 10 
if x == 10: print("x = 10")



		THE IF...ELSE STATEMENT 

So far, we have seen that we can use the if statement to evaluate condition and execute a statement when the results evaluates to TRUE. 
However, with the if statement,nothing happens when the condition evaluates to FALSE. 
With the if… else statement, we can provide an alternative statement for the interpreter to execute should the condition being evaluated evaluate to FALSE. 

This is an example of IF...ELSE statement

x = 10
if x == 10:
     print ("x = 10")
else:
    print ("x is not equal to 10")

Here is the flowchart diagram of the if… else structure of decision making in Python: 

We wrote a program that evaluates whether one variable is equal to another and to execute a statement if it is, or execute a second if it is not. 
We used the if… else condition to achieve this. 

The syntax of an if… else statement takes this format: 

if condition_test: 
statement_of_if 
else: 
statement_of_else 

	if… else condition 
x, y = 12, 12 
if (x == y): 
    print ("x is equal to y") 
else: 
    print ("x is not equal to y") 

Can you change the values of the variables x or y to make them equal and see what happens when you run the script?


		IF...ELIF...ELSE STATEMENT

The if… else statement is a way for the program to evaluate a condition, and execute a statement when the condition returns TRUE or
execute another when it returns FALSE. With Python, you can evaluate a condition more than once and use the if… else statement more than once. 
However, rather than use an else… if statement, you can easily use elif. elif is the short of else if. This is best demonstrated in Exercise36.py. 

Exercise36.py: 

Nested if statements 

age = int(input("Enter age to evaluate:")) 
if age >= 18: 
    agegroup = "Adult" 
elif age >= 13: 
    agegroup = "Teenager" 
elif age >=0: 
    agegroup = "Child" 
else: 
    agegroup = "Invalid" 
print (agegroup) 

Best practice: limit IF...ELIF...ELSE statement to no more than 5 condition statement

In Exercise36, the program prompts the user to enter an integer to evaluate. It checks whether the input is equal to or greater than 18 and if TRUE,
determines that the agegroup is Adult. If it is not equal or greater than 18, which means the condition returns FALSE, it moves 
on to the next elif block for evaluation and so on. At the end, there is an else statement that is executed should all the elif statements return FALSE.

		

		NESTED IF STATEMENT

With Python, you can use one if or if… elif… else statement inside another if… elif… else statement or statements. 
This forms a nested structure of if and if… else’s. The only way to figure out which level of nesting a statement 
is at before arriving at the last else statement is by using indentation. Because nesting if statements can be very confusing, 
you should try to avoid using it if you can. 

Exercise37 illustrates how a nested if… elif… else statement looks like. 

Exercise37: Nested if statement 

number = float(input("Enter a number to evaluate: ")) 
if number >= 0: 
    if number == 0: 
        print (number, "is a Zero") 
    else:
        print (number, "is a positive number")
else:
   print (number, "is a negative number")
