				BASIC OPERATORS IN PYTHON

In programming, an operator is the construct which is used to manipulate the values of operands.

On your terminal, invoke the Python interpreter by typing "Python3"
Then type the following:

	5 + 9
	6 / 8
	90 * 21
	21 % 2
	20 - 10

You will notice that you can do this basic arithemetic calculations just by entering values seperated
by operands such as plus (+), minus (-), division (/), multiplication (*), and modulus (%).

	TYPES OF OPERATORS

There are seven types of operators supported by the python language.
They are:

	1. Arithemetic Operators
	2. Relational or Comparison Operators
	3. Assignment Operators
	4. Logical Operators
	5. Membership Operators
	6. Identity Operators
	7. Bit-Wise Operators

ARITHEMETIC OPERATORS
Start your text editor and carry out these examples to get some experience on how Arithemetic Operators 
in Python works.

x, y, z, f = 27, 10, -9, 4

a = x + y
print('when you add x and y, you get', a)

b = x - y
print('when you subtract y from x, you get', b)

c = x * y
print('when you multiply x and y, you get', c)

d = x / z
print('when you divide x by z, you get', d)

e = x % y
print(e, 'is the remainder when x is divided by y')

g = x ** f
print('x to the power of f is', g)

h = x // y
print('the floor division of x divided by y is' h)

Here is a table summerizing the above (and more) arithemetic operators used in python:

	Operator			Description

	+ addition			Add two values on either sides.

	- subtraction			Subtract the value on the right side from that on the left.

	* multiplication		Multiplies values on eithe sides.

	/ division			Divides the value on the left side by that on the right

	% modulus			Divides the value on the left by that on the right and returns
					the remainder.

	** Exponent			Performs exponential (power) calculation of the value on the
					right by the value on the left.

	// floor division		Divides the value on the left by that on the right and
					returns the quotients, (values of the result without the decimal
					value).


COMPARISON OPERATOR

As with the arithemetic operators, we will learn comparison by first writing a script then running it 
to see the result. 

Example:

x, y = 12, 10

if (x == y):
	print('1. x is equals to y')
else:
	print('1. x is not equal to y')

if (x != y):
	print('2. x is not equal to y')
else:
	print('2. x is equal to y')

if (x < y):
	print('3. x is less than y')
else:
	print('3. x is not less than y')

if (x > y):
	print('4. x is greater than y')
else:
	print('4. x is not greater than y')

if (x <= y):
	print('5. x is either less than or equal to y')
else:
	print('5. x is neither less than nor equal to y')

if (x >= y):
	print('6. x is either greater than or equal to y')
else:
	print('6. x is neither greater than nor equal to y')


Demonstrate how to use relational operators.

The table below summarise what all the relational operators in Python do:


	OPERATOR		DESCRIPTION
	
	==			Condition returns TRUE if the value of the left and right operand are equal.

	!=			Condition returns TRUE if the value of the left and right operand are not equal.

	>			Condition returns TRUE if the value of the left operand is greater than the value of the right operand.

	<			Condition returns TRUE if the value of the left operand is less than the value of the right operand.

	>=			Condition returns TRUE if the value of the left operand is greater or equal to the value of the right operand.

	<=			Condition returns TRUE if the value of the left operand is less than or equal to the value of the right operand.



	
		ASSIGNMENT OPERATORS
As the name suggest, assignment operators are used to assign values to variables.
Demonstration how these operators are used.

x, y, z = 12, 7, 0

z = x + y # x = 12, and y = 7 therefore x + y = 12 + 7 = 19 therefore z = 19 
print('1. value of z is', z)

z += x # z = z + x
print('2. value of z is', z)

z *= x # z = z * x
print('3. value of z is', z)

z /= x
print('4. value of z is', z)

z = 2
z %= x
print('5. value of z is', z)

z **= x
print('6. value of z is', z)

z //= x
print('7. value of z is', z)


Here is a table that summarise what each of the operator do:

		OPERATOR		DESCRIPTION

		=			The "equal sign" assigns values on the right operand to that on the left side

		+= ADD AND		Adds the value of the right operand to the value of the left operand then assign the result to the left operand

		-= SUBTRACT AND		Subtract the value of the right operand from the value left operand then assign the result to the left operand

		*= MULTIPLY AND		Multiplies the value of the right operand with the value of the left operand then assign the result to the left
					operand

		/= DIVIDE AND		Divides the value of the left operand by the value right operand then assign result to the left operand

		%= MODULUS AND		Takes the modulus using the values of the two operands then assign the result to the left operand

		**= EXPONENT AND	Performs exponential (power) calculation of the operators then assign the result to the left operand

		//= FLOOR DIVISION	It performs floor division on the operators then assign the result to the left operand


Other assignment operators you will come across at advanced stage of learning Python which are: &=, |=, ^=, >>=, and <<=. 



		LOGICAL OPERATORS

There are three logical operators in Python: and, or, not.


x = True
y = False


print('when x is TRUE and y is FALSE:')


print('x and y is', x and y)


print('x or y is', x or y)


print('not x is', not x)


print('not y is', not y)


Here is a summary of what the logical operator in Python do:

		OPERATOR		MEANING

		and			Returns True if both operands are True.

		or			Returns True if either operands is True.

		not			Returns True if operand is False and False if the operand is True


	MEMBERSHIP OPERATORS

There are two membership operators in Python: "in" and "not in". They are used to test whether a variable or value is present 
in a sequence such as string, dictionary, list, set, or tuple. We will learn about this types later on. 

x = 'Hello World'
y = {1:'x', 2:'y'}

print('H' in x)

print('Hello' not in x)

print(2 in y)

print('z' in y)


The table below should help you understand why you get the result you see

		OPERATOR		MEANING

		in			Returns True if the variable or variable is found in the sequence.

		not in			Returns True if the variable or value is not found in the sequence.


Identity Operator

Identity Operator are another kind of special operators in Python. They are "is" and "is not".
These operators are used to check if two variables or values are located on the same memory allocation.


x1 = 10
y1 = 10
x2 = 'hello'
y2 = 'hello'
x3 = [1,2,3]
y3 = [1,2,3]

print(x1 is not y1)
print(x2 is y2)
print(x3 is y3)


In the code above, x1 and y1 are variables with similar values (integer value 10). 
This means that they are equal and identical, just as variables x2 and y2 with similar
and equal string values. However, x3 and y3, although equal, are not identical because 
they are lists and lists are mutables (this means they can be changed).
The interpreter allocates the lists seperate memory even when they are equal.

Here is a table defining what the identity operators do.


		OPERATOR			MEANING

		is				Returns True if the operands are identical.
		
		is not				Returns True if the operands are not identical.



	BITWISE OPERATORS

Bitwise operators in python acts on operands in binary digit form, bit by bit.

Here is a summary of the operators



		OPERATORS			MEANING

		&				This is called bitwise AND

		|				This is called bitwise OR

		~				This is called bitwise NOT

		^				This is called bitwise XOR (exclusive or)

		>>				This is called bitwise right shift

		<<				This is called bitwise left shift




	OPERATORS PRECEDENCE IN PYTHON

To evaluate expression with more than a single operator, python uses a rule of precedence that guides 
the order in which the operations are executed. For instance, multiplication has a higher precedence 
than addition, and addition higher than subtraction. 

This rigid order can be changed using parenthesis () as it has the highest precedence. The table below 
list the precedence of all operators from the highest to the lowest.


			OPERATORS			DESCRIPTION

1. 			()				Parenthesis

2.			**				Exponential (raised to the power)

3.			~ + -				Complements, ordinary plus +@ and minus -@

4. 			* / % //			Multiply, divide, modulus, floor division

5.			+ - 				Addition and Subtraction

6. 			>> <<				Right and Left bitwise shift

7. 			&				Bitwise AND

8. 			^ | 				Bitwise Exclusive  XOR and reqular OR

9. 			<= < > >=  			Comparison operators

10 			 == !=				Equality operators

11.			= %= /= //= -= += *= **=	Assignment operators

12.			is, is not			Identity operators

13.			in, not in			Membership operators

14.			not, or, and			Logical operators





