				PYTHON DATA STRUCTURES

Sequences are another basic types of data structures in Python. Each element is a sequence,
be it a list, tuple, dictionary, set, queue, and stack, it assigns an index that marks its position.

The first index is always zero, the second is one, and so on. Python has six in-built data structures types
of sequences but the most common that every beginner should learn are list, tuple, and dictionary. 


			LISTS


A list is basically an ordered sequence of items. In Python, list are among the most popular sequence data 
structure types because they are flexible (the items do not need to be of the same types), and declaring them is
quite easy. Items in a list are enclosed within square brackets [] and are seperated by commas. 


	CREATING A LIST IN PYTHON

To create a list in Python, enclose items in square brackets seperated by commas and assign it a variable.

e.g. 

weekdays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

year_list = [2025, 'two thousand and twenty five']

favourite = ['a', 'x', 'i', 'xx']

print(weekdays, year_list, favourite)

Just as a string indices, elements of a list are indexed starting at zero. They can be concatenated, sliced
and so on. 


	ACCESSING VALUE IN A LIST

To access the value of a list, we use square bracket and  slicing to refer to the values using the index of 
indices.

e.g.


months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']

print('The first month is ', months[0])

print('The fifth to ninth months are ', months[4:9])

print('The second last month is ', months[-2])

print(months[6:], ' makes up the last half of the year')


	UPDATING A LIST

You can update a single element or multiple elements of a list simultenously by specifing the slice on the left side
of the assignment operator.

e.g. 


# UPDATING A LIST

subject = ['maths', 'physics', 'chemistry']

print('List of subjects ', subject)

subject[2] = 'biology' # Modifying index 2 of the subject list to a new value

print('Updated list of subjects ', subject)

subject[0] = 'geography'

print('Updated list of subjects ', subject)



To add elements to a list you need to append() function. We will do this example later

# Appending a list

subject.append('history') # At index zero of subject add 'history'

print('Updated list of subjects ', subject)


	DELETING AN ELEMENT IN A LIST

There are two ways you can delete an element in a list. You can use the del statement if you know the exact
element or elements you wish to delete or remove() function method if you do not know the index


# Deleting an element in a list with del and remove() function

subject = ['maths', 'physics', 'chemistry']

print('List of subjects ', subject)

del subject[0] # state the variable and the index of the value to be deleted

print('List of subjects with maths deleted', subject)

subject.remove('chemistry') # state the variable and indicate the exact value you want to remove

print('List of subjects with chemistry removed', subject)


	BASIC LIST OPERATIONS

Just like strings, list can be manipulated using operators such as + to concatenate and * to iterate.
Generally speaking list respond to all the general sequence operations that we use on strings in the 
previous chapter. Try out the exercise below to have have a better grasp of what each does.

e.g. 

fruit = ['mango', 'apple', 'guava', 'pineapple', 'bannana']

number_1 = [1, 2, 'three', 4]

number_2 = [7, 'x', 'p', 10]

print('The length of the fruit list is ', len(fruit))

numbers = number_1 + number_2

print(numbers)

print(numbers * 2)

print(10 in number_2)

for x in [1, 2, 3]:
	print(x)


The following tables summarises the built-in methods and functions that can be used to manipulate list in Python:


		FUNCTION			DESCRIPTION
		
		cmp(list1, list2)		Compares the elements of two lists
		
		len(list)			Returns the total length of the list
		
		max(list)			Returns the item with maximum/highest value from the list

		min(list)			Returns the item with the least/smallest value from the list

		list(list)			Convert a tuple into list

		
The following list methods are built into Python

	
		METHOD				DESCRIPTION

		[list variable].append(x)	Append an object list to list

		[list variable].count(x)	Returns the count of how many times x occurs in the list

		[list variable].extend(seq)	Appends the content of seq to list

		[list variable].insert(index,x)	Insert object x into the list of the specified index
		
		[list variable].pop(x=list[-1])	Removes and returns last object or x from list
		
		[list variable].remove(x)	Removes object x from list

		[list variable].reverse()	Reverses the list of object

		[list variable].sort([func])	Sort object of list using compare func (if provided)




					TUPLES


Similar to list a tuple is an ordered sequence of items. The only difference between it an a list is that a Tuple is immutable.
This means that once it has been created it cannot be modified.

Tuples are used to create write-protected data. Because they are not dynamic, they are often faster than list. A tuple is
defined within parentheses (), and the values are seperated by commas. Like list, a tuple can contain values of different data types.


my_tuple = (5, '2015', 1+3j)

The slicing operator we used on strings and list [] can be used to extract the item in a tuple, but value cannot be changed.

my_tuple2 = (1, 2, 3, 4, 5)

An empty tuple is basically 2 parentheses with nothing between them. 

empty_tuple = ()

To create a tuple with only one value, it must include a comma. Like this:

year = (2025,)

Just like strings and list, the values within a tuple are references with indices that start at 0 and can be
concatenated, sliced, and so on.



	ACCESSING VALUES IN A TUPLE

Use the square bracket [] to slice along the index or indices and assess the values of a tuple

e.g.

continent = ('asia', 'africa', 'america', 'australia', 'europe')

print('continent[0]:',continent[0])

print('continent[2:]:',continent[2:])

print('continent[:-3]:',continent[:-3])


	UPDATING A TUPLE

Tuple are immutable, which means that the tuple element or values cannot be changed or updated. However, you can take the values 
from an existing tuple and create a new tuple. 

continent = ('asia', 'america', 'europe', 'australia', 'africa')

continent_2 = ('antartica',)

all_continents = continent + continent_2

print(all_continents)


	DELETING TUPLE ELEMENT

It is not possible to remove individual values of a tuple. Therefore, the only option, as we saw with updating tuple code above, is
to create another tuple from the values of an existing tuple, discarding the undesired element.

To delete an entire tuple, you can use the keyword del statement. The syntax looks like this:

del tuple

where tuple is the name of the tuple to delete.


	BASIC TUPLE OPERATORS

As we have already learnt, tuple respond to most operators we use on strings and list including the + operator for concatenating 
* for iterating. Generally speaking, tuple responds to all the operations we have used on strings, therefore, we will not repeat them 
in this section. For your free practice time, find out which operations from strings and list can be applied to tuple and find out 
what result they return. 





				DICTIONARIES

A dictionary in python is an unordered collection of items seperated by comma and enclosed in curly braces. Unlike other compound data structures 
such as a list, and a tuple, which have only one value or element, a dictionary has a pair of key and value seperated by a colon {a:b}. An empty 
dictionay (dictionary without values) will have curly braces.

The value of a dictionay might be any data type, but the data type of the keys must be immutable such as numbers, strings, or tuple. Dictionary 
in python are optimised to retrieve paired values using the element key.


	CREATING A DICTIONARY

To create a dictionary, simply list item pairs seperated by comma inside curly braces {}. Each item must have a key and a corresponding value in 
format key:value

e.g.

empty_dict = {}

integer_key_dict = {1:'mango', 2:'apple', 3:'pineapple'}

mixed_key_dict = {'name':'ubon', 0:[2,4,3]}

print(integer_key_dict)

print(mixed_key_dict)

print(empty_dict)

We can also create a dictionary using the built-in function dict()

	
	
	ACCESSING THE ELEMENT OF A DICTIONARY

While we use indexes to access the value of strings, tuples, and list, with dictionaries, we use keys. To access an element in a dictionary, 
we use a key inside a square bracket or the get() method.

e.g.

my_dict = {'name':'ubon', 'age':30, 'occupation':'programmer'}

print(my_dict['name'])

print(my_dict.get('age'))

work = my_dict.get('occupation')

print(work)


If you use the square bracket method to access a key that does not exist in the dictionary, it will return a KeyError but using the 
get method, it will return None instead. 


	ADDING, DELETING, MODIFYING ELEMENT IN A DICTIONARY

Because a dictionary is a mutable data structure, you can add new or delete or update exiting element. If the key of the element 
you are changing exist, the value will get updated, else a new key:value pair will be created and added to the dictionary. 

e.g.

student = {"name": "John Doe", "age": 25, "grade": "B+"} 

print ("Before update:", student) 

print ("\nChange age to 30:\nAdd Sex key:value pair") 

student["age"] = 30 

student["sex"] = "Male" 

print ("\nAfter update:", student) 

print ("Delete grade entry:") 

del student["grade"] 

print ("After deleting grade:", student)



When you run the above code, you will learn that: 

You can update the value of a key in the dictionary by assigning it a new 
value using the traditional = operator. 

You can create a new key:value pair by assigning a non-existent key a 
new value as in student["sex"] = "Male". 

You can remove an individual dictionary element using the del operator. 

You can also remove all the contents of a dictionary in a single operation using the dict.clear() method statement. You can also delete the entire dictionary by 
using del dictionary operation where dictionary is the name of the dictionary. 

Here is a table summarizing the built-in methods and functions you can use to manipulate a dictionary in Python.



			FUNCTION                        DESCRIPTION

			cmp(dict1, dict2)		Compares the elements of dict1 to those of dict2. 

			len(dict)			Returns the total length of the dictionary (the number of items in the dictionary)

			str(dict)			Returns a printable string representation of the dictionary

			type(variable)			Returns the type of the passed variable.


The next table is a presentation of the methods that you can use to manipulate the elements of a dictionary:


			Methods				Description
 
			dict.clear()			Removes all the elements of the dictionary dict 

			dict.copy()			Returns a shallow copy of the dictionary dict 

			dict.fromkeys()			Creates a new dictionary with keys from seq with values set to value. 

			dict.get(x,default=None)	Returns the value of key x in the dict dictionary or default if the does not exist. 

			dict.has_key(x)			Returns True if key x is in dictionary dict, otherwise False 

			dict.items()			Returns a list of dict's (key, value) pairs in tuple format. 

			dict.keys()			Returns list of keys of the dict dictionary. 

			dict.setdefault(x,default=None)	Returns the value of key x in the dict dictionary or set dict[key]=default if key does not exist. 

			dict.update(dict2)		Adds dictionary key:value pairs from dict to dict 

			dict.values()			Returns a list of values from the dict dictionary.



		PROPERTY OF DICTIONARY KEYS

While the values of a dictionary in Python have no restriction – they can be made up of any arbitrary objects or data types, 
which include standard or user- defined objects – keys are different. There are two vital points you must know about dictionary keys in Python:

	1.	You cannot enter more than one key in a dictionary. This means you cannot have duplicate keys in a single dictionary. 
	2.	Unlike values, keys are immutable. This means you can use types such as strings, tuples, and strings as keys, 
		but you cannot define a key using something like [“Key”).


